package classes;

import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Random;

import classes.AStar;

public class AutoAgv extends agv{

	private Queue<Integer> path_x = new LinkedList<>();
	private Queue<Integer> path_y = new LinkedList<>();
	
	private final int BLOCKS_WIDTH = 52;
	private final int BLOCKS_HEIGHT = 28;
	private int des_x;
	private int des_y;
	private boolean achieve = false;
	
	private short path[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 50, 28, 50, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 50, 28, 50, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 43, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 58, 28, 50, 28, 50, 28, 50, 28, 50, 28, 28, 50, 28, 59, 28, 59, 36, 50, 36, 50, 36, 50, 36, 50, 36, 36, 50, 36, 59, 36, 59, 28, 50, 28, 50, 28, 50, 28, 50, 28, 28, 50, 28, 57, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 20, 0, 12, 0, 20, 0, 12, 0, 0, 20, 0, 12, 0, 20, 0, 12, 0, 20, 0, 12, 0, 20, 0, 0, 12, 0, 20, 0, 12, 0, 20, 0, 12, 0, 20, 0, 12, 0, 0, 20, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 58, 36, 49, 36, 59, 36, 59, 36, 49, 36, 36, 49, 36, 49, 36, 49, 28, 49, 28, 59, 28, 59, 28, 49, 28, 28, 49, 28, 49, 28, 49, 36, 49, 36, 59, 36, 59, 36, 49, 36, 36, 49, 36, 57, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 20, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 20, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 58, 28, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 36, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 36, 57, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 28, 28, 28, 57, 0, 0, 0, 12, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 12, 0, 0, 0, 0, 0, 0, 58, 28, 28, 28, 0, 0, 28, 28, 28, 57, 0, 0, 0, 12, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 12, 0, 0, 0, 0, 0, 0, 58, 28, 28, 28, 0, 0, 0, 0, 0, 20, 0, 0, 0, 58, 36, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 28, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 28, 57, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 20, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 20, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 20, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 20, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 58, 28, 50, 28, 59, 28, 59, 28, 50, 28, 28, 50, 28, 50, 28, 50, 36, 50, 36, 59, 36, 59, 36, 50, 36, 36, 50, 36, 50, 36, 50, 28, 50, 28, 59, 28, 59, 28, 50, 28, 28, 50, 28, 57, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 12, 0, 20, 0, 12, 0, 20, 0, 0, 12, 0, 20, 0, 20, 0, 20, 0, 12, 0, 20, 0, 12, 0, 0, 20, 0, 12, 0, 12, 0, 12, 0, 20, 0, 12, 0, 20, 0, 0, 12, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 58, 36, 49, 36, 49, 36, 49, 36, 49, 36, 36, 49, 36, 59, 36, 59, 28, 49, 28, 49, 28, 49, 28, 49, 28, 28, 49, 28, 59, 28, 59, 36, 49, 36, 49, 36, 49, 36, 49, 36, 36, 49, 36, 57, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 41, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 49, 28, 49, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 49, 28, 49, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	
	public AutoAgv(int x, int y,int BLOCKS_SIZE) {
		super(x, y, BLOCKS_SIZE);
		Random rand = new Random();
		while(true) {
			des_x = rand.nextInt(BLOCKS_WIDTH);
			des_y = rand.nextInt(BLOCKS_HEIGHT);
			if(path[des_x + des_y*BLOCKS_WIDTH] != 0) {
				break;
			}
		}
		
	}
	
	public boolean get_achieve() {
		return achieve;
	}
	
	public int get_des_x() {
		return des_x;
	}
	
	public int get_des_y() {
		return des_y;
	}
	
	public void set_path_x(Queue<Integer> path_x) {
		this.path_x = path_x;
	}
	
	public void set_path_y(Queue<Integer> path_y) {
		this.path_y = path_y;
	}
	
	public boolean checkEmpty()
	{
		if(path_x.isEmpty()) return true;
		return false;
	}
	
	public boolean move()
	{
		while(x==path_x.peek()*BLOCKS_SIZE+BLOCKS_SIZE/2 && y==path_y.peek()*BLOCKS_SIZE+BLOCKS_SIZE/2) {
			path_x.remove();
			path_y.remove();
		}
		if(path_x.peek()*BLOCKS_SIZE+BLOCKS_SIZE/2 > x) x++;
		else if(path_x.peek()*BLOCKS_SIZE+BLOCKS_SIZE/2 < x) x--;
		else if(path_y.peek()*BLOCKS_SIZE+BLOCKS_SIZE/2 > y) y++;
		else if(path_y.peek()*BLOCKS_SIZE+BLOCKS_SIZE/2 < y) y--;
		
		return false;
	}
	
}
